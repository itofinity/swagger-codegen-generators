{{>partial_header}}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
{{^netStandard}}
{{^supportsUWP}}
using System.Web;
{{/supportsUWP}}
{{/netStandard}}
using System.Linq;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using Refit;
using {{packageName}}.{{apiPackage}};

namespace {{packageName}}.Client
{
    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
    {{>visibility}} partial class ApiClient
    {
        public ApiClient(HttpClient client)
        {
{{#apiInfo}}
    {{#apis}}
        {{#operations}}
            {{classname}}Client = RestService.For<{{interfacePrefix}}{{classname}}>(client);

        {{/operations}}
    {{/apis}}
{{/apiInfo}}
        }

        /// <param name="getSchemeAndToken"></param>
        public ApiClient(string url, Func<Task<Tuple<string, string>>> getSchemeAndToken) : this(new HttpClient(new AuthenticatedHttpClientHandler(getSchemeAndToken))
            {
            BaseAddress = new Uri(url)
            })
        {
        }

{{#apiInfo}}
    {{#apis}}
        {{#operations}}
        /// <inheritdoc />
        public {{interfacePrefix}}{{classname}} {{classname}}Client { get; }

        {{/operations}}
    {{/apis}}
{{/apiInfo}}

        public string Scheme { get; }

        public string Token { get; }

        private async Task<Tuple<string, string>> GetSchemeAndToken()
        {
            return new Tuple<string, string>(Scheme, Token);
        }
    }

    public class AuthenticatedHttpClientHandler : HttpClientHandler
    {
        private readonly Func<Task<Tuple<string, string>>> getSchemeAndToken;

        public AuthenticatedHttpClientHandler(Func<Task<Tuple<string, string>>> getSchemeAndToken)
        {
            this.getSchemeAndToken = getSchemeAndToken;
        }

        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request,
            CancellationToken cancellationToken)
        {
            // See if the request has an authorize header
            var auth = request.Headers.Authorization;
            var schemeAndToken = await getSchemeAndToken().ConfigureAwait(false);

            if (schemeAndToken != null)
            {
            request.Headers.Authorization = new AuthenticationHeaderValue(schemeAndToken.Item1, schemeAndToken.Item2);
            }


            return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);
        }
    }
}
